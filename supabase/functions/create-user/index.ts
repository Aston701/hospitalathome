import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
import { z } from 'https://deno.land/x/zod@v3.22.4/mod.ts'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

// Input validation schema
const createUserSchema = z.object({
  email: z.string().email().max(255),
  password: z.string().min(8).max(72).optional(),
  full_name: z.string().trim().min(1).max(255),
  role: z.enum(['admin', 'doctor', 'nurse', 'control_room']),
  phone: z.string().max(20).optional().nullable(),
  sendWelcomeEmail: z.boolean().optional(),
})

// Generate secure random password
function generateSecurePassword(length: number = 12): string {
  const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*";
  const array = new Uint8Array(length);
  crypto.getRandomValues(array);
  return Array.from(array, (byte) => charset[byte % charset.length]).join('');
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // Create client to verify calling user
    const authHeader = req.headers.get('Authorization')
    if (!authHeader) {
      return new Response(
        JSON.stringify({ error: 'Unauthorized - No authorization header' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 401 }
      )
    }

    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      {
        global: {
          headers: { Authorization: authHeader }
        }
      }
    )

    // Verify the calling user is authenticated
    const { data: { user }, error: userError } = await supabaseClient.auth.getUser()
    if (userError || !user) {
      return new Response(
        JSON.stringify({ error: 'Unauthorized - Invalid token' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 401 }
      )
    }

    // Create admin client
    const supabaseAdmin = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '',
      {
        auth: {
          autoRefreshToken: false,
          persistSession: false
        }
      }
    )

    // Check if calling user is admin
    const { data: callerProfile } = await supabaseAdmin
      .from('profiles')
      .select('role')
      .eq('id', user.id)
      .single()

    if (callerProfile?.role !== 'admin') {
      return new Response(
        JSON.stringify({ error: 'Forbidden - Admin access required' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 403 }
      )
    }

    // Validate and parse input
    const rawData = await req.json()
    const validatedData = createUserSchema.parse(rawData)
    const { email, full_name, role, phone, sendWelcomeEmail } = validatedData
    
    // Generate password if not provided or if welcome email is requested
    const password = validatedData.password || generateSecurePassword()
    const isAutoGeneratedPassword = !validatedData.password || sendWelcomeEmail

    // Create user in auth
    const { data: authData, error: authError } = await supabaseAdmin.auth.admin.createUser({
      email,
      password,
      email_confirm: true,
      user_metadata: {
        full_name,
        role,
        must_change_password: isAutoGeneratedPassword
      }
    })

    if (authError) throw authError

    // Update profile
    const { error: profileError } = await supabaseAdmin
      .from('profiles')
      .update({
        full_name,
        phone: phone || null,
        role
      })
      .eq('id', authData.user.id)

    if (profileError) throw profileError

    // Send welcome email if requested
    if (sendWelcomeEmail) {
      try {
        // Get Zapier webhook URL from system settings
        const { data: settings } = await supabaseAdmin
          .from('system_settings')
          .select('zapier_webhook_url')
          .single()

        if (settings?.zapier_webhook_url) {
          const loginUrl = 'https://hospitalathome.mediresponse.co/auth'
          
          // Create formatted HTML email body
          const emailBody = `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
<body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
  <h1 style="color: #2563eb; margin-bottom: 20px;">Welcome to Hospital at Home!</h1>
  
  <p>Hello <strong>${full_name}</strong>,</p>
  
  <p>Your account has been created successfully.</p>
  
  <div style="background-color: #f3f4f6; padding: 20px; border-radius: 8px; margin: 20px 0;">
    <h2 style="margin-top: 0; color: #1f2937;">Your Login Details:</h2>
    <ul style="list-style: none; padding: 0;">
      <li style="margin: 10px 0;"><strong>Email:</strong> ${email}</li>
      <li style="margin: 10px 0;"><strong>Temporary Password:</strong> ${password}</li>
      <li style="margin: 10px 0;"><strong>Role:</strong> ${role.replace(/_/g, ' ').toUpperCase()}</li>
    </ul>
    <p style="margin: 15px 0;">
      <a href="${loginUrl}" style="display: inline-block; background-color: #2563eb; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; font-weight: bold;">Login Now</a>
    </p>
    <p style="margin: 10px 0; font-size: 14px; color: #6b7280;">Login URL: <a href="${loginUrl}" style="color: #2563eb;">${loginUrl}</a></p>
  </div>
  
  <div style="background-color: #fef2f2; border-left: 4px solid #dc2626; padding: 15px; margin: 20px 0;">
    <h3 style="margin-top: 0; color: #dc2626;">IMPORTANT SECURITY NOTICE:</h3>
    <p>For your security, you will be required to change this temporary password when you first log in. Please keep these credentials confidential and change your password immediately upon first access.</p>
  </div>
  
  <h3 style="color: #1f2937;">Instructions:</h3>
  <ol style="line-height: 1.8;">
    <li>Visit the login URL above</li>
    <li>Enter your email and temporary password</li>
    <li>You will be prompted to create a new secure password</li>
    <li>Choose a strong password with at least 8 characters</li>
  </ol>
  
  <p style="margin-top: 30px; color: #6b7280; font-size: 14px;">If you have any questions or need assistance, please contact your administrator.</p>
  
  <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #e5e7eb;">
    <p style="margin: 0;"><strong>Best regards,</strong></p>
    <p style="margin: 5px 0;">Hospital at Home Team</p>
  </div>
</body>
</html>
          `.trim()

          // Trigger notification via Zapier
          await supabaseAdmin.functions.invoke('trigger-notification', {
            body: {
              webhookUrl: settings.zapier_webhook_url,
              notificationType: 'user_welcome',
              subject: 'Welcome to Hospital at Home - Your Account Details',
              message: emailBody,
              recipientEmail: email,
              recipientName: full_name,
              additionalData: {
                role: role,
                email_body: emailBody
              }
            }
          })
          
          console.log('Welcome email triggered for:', email)
        }
      } catch (emailError) {
        // Log but don't fail user creation if email fails
        console.error('Failed to send welcome email:', emailError)
      }
    }

    // Note: user_roles is automatically created by the handle_new_user() trigger

    return new Response(
      JSON.stringify({ user: authData.user }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      },
    )
  } catch (error) {
    console.error('Error in create-user function:', error);
    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred'
    const statusCode = error instanceof Error && error.message.includes('Forbidden') ? 403 : 
                       error instanceof Error && error.message.includes('Unauthorized') ? 401 : 400;
    
    return new Response(
      JSON.stringify({ 
        error: errorMessage,
        details: error instanceof Error ? error.stack : undefined
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: statusCode,
      },
    )
  }
})