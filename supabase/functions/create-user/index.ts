import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
import { z } from 'https://deno.land/x/zod@v3.22.4/mod.ts'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

// Input validation schema
const createUserSchema = z.object({
  email: z.string().email().max(255),
  password: z.string().min(8).max(72).optional(),
  full_name: z.string().trim().min(1).max(255),
  role: z.enum(['admin', 'doctor', 'nurse', 'control_room']),
  phone: z.string().max(20).optional().nullable(),
  sendWelcomeEmail: z.boolean().optional(),
})

// Generate secure random password
function generateSecurePassword(length: number = 12): string {
  const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*";
  const array = new Uint8Array(length);
  crypto.getRandomValues(array);
  return Array.from(array, (byte) => charset[byte % charset.length]).join('');
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // Create client to verify calling user
    const authHeader = req.headers.get('Authorization')
    if (!authHeader) {
      return new Response(
        JSON.stringify({ error: 'Unauthorized - No authorization header' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 401 }
      )
    }

    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      {
        global: {
          headers: { Authorization: authHeader }
        }
      }
    )

    // Verify the calling user is authenticated
    const { data: { user }, error: userError } = await supabaseClient.auth.getUser()
    if (userError || !user) {
      return new Response(
        JSON.stringify({ error: 'Unauthorized - Invalid token' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 401 }
      )
    }

    // Create admin client
    const supabaseAdmin = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '',
      {
        auth: {
          autoRefreshToken: false,
          persistSession: false
        }
      }
    )

    // Check if calling user is admin
    const { data: callerProfile } = await supabaseAdmin
      .from('profiles')
      .select('role')
      .eq('id', user.id)
      .single()

    if (callerProfile?.role !== 'admin') {
      return new Response(
        JSON.stringify({ error: 'Forbidden - Admin access required' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 403 }
      )
    }

    // Validate and parse input
    const rawData = await req.json()
    const validatedData = createUserSchema.parse(rawData)
    const { email, full_name, role, phone, sendWelcomeEmail } = validatedData
    
    // Generate password if not provided or if welcome email is requested
    const password = validatedData.password || generateSecurePassword()
    const isAutoGeneratedPassword = !validatedData.password || sendWelcomeEmail

    // Create user in auth
    const { data: authData, error: authError } = await supabaseAdmin.auth.admin.createUser({
      email,
      password,
      email_confirm: true,
      user_metadata: {
        full_name,
        role,
        must_change_password: isAutoGeneratedPassword
      }
    })

    if (authError) throw authError

    // Update profile
    const { error: profileError } = await supabaseAdmin
      .from('profiles')
      .update({
        full_name,
        phone: phone || null,
        role
      })
      .eq('id', authData.user.id)

    if (profileError) throw profileError

    // Send welcome email if requested
    if (sendWelcomeEmail) {
      try {
        // Get Zapier webhook URL from system settings
        const { data: settings } = await supabaseAdmin
          .from('system_settings')
          .select('zapier_webhook_url')
          .single()

        if (settings?.zapier_webhook_url) {
          const loginUrl = 'https://hospitalathome.mediresponse.co/auth'
          
          // Create formatted email body
          const emailBody = `
Hello ${full_name},

Welcome to Hospital at Home! Your account has been created successfully.

Your Login Details:
- Email: ${email}
- Temporary Password: ${password}
- Role: ${role.replace(/_/g, ' ').toUpperCase()}

Login URL: ${loginUrl}

IMPORTANT SECURITY NOTICE:
For your security, you will be required to change this temporary password when you first log in. Please keep these credentials confidential and change your password immediately upon first access.

Instructions:
1. Visit the login URL above
2. Enter your email and temporary password
3. You will be prompted to create a new secure password
4. Choose a strong password with at least 8 characters

If you have any questions or need assistance, please contact your administrator.

Best regards,
Hospital at Home Team
          `.trim()

          // Trigger notification via Zapier
          await supabaseAdmin.functions.invoke('trigger-notification', {
            body: {
              webhookUrl: settings.zapier_webhook_url,
              notificationType: 'user_welcome',
              subject: 'Welcome to Hospital at Home - Your Account Details',
              message: emailBody,
              recipientEmail: email,
              recipientName: full_name,
              additionalData: {
                role: role,
                email_body: emailBody
              }
            }
          })
          
          console.log('Welcome email triggered for:', email)
        }
      } catch (emailError) {
        // Log but don't fail user creation if email fails
        console.error('Failed to send welcome email:', emailError)
      }
    }

    // Note: user_roles is automatically created by the handle_new_user() trigger

    return new Response(
      JSON.stringify({ user: authData.user }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      },
    )
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred'
    return new Response(
      JSON.stringify({ error: errorMessage }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 400,
      },
    )
  }
})